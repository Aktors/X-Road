import org.apache.tools.ant.filters.ReplaceTokens

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources']
    }
}

dependencies {
    compile project(':common-util')
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.64'
    compile 'commons-io:commons-io:2.6'
    testCompile project(':common-util').sourceSets.test.output
    xjc "org.glassfish.jaxb:jaxb-xjc:$jaxbVersion"
    xjc "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
}

task createDirs() {
    doLast {
        project.ext.schemaTargetDir.mkdirs()
    }
}

task xjc() {
    inputs.files fileTree(dir: 'src/main/resources', include: '*.xsd')
    outputs.dir schemaTargetDir

    doLast {
        ant.taskdef(name: 'xjc',
            classname: 'com.sun.tools.xjc.XJCTask',
            classpath: configurations.xjc.asPath)

        // Generate classes for hash chains
        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.common.hashchain',
            schema: 'src/main/resources/hashchain.xsd',
        )

    }
}

task make(type: Exec) {
    workingDir '../'
    commandLine 'make'
}

task makeClean(type: Exec) {
    workingDir '../'
    commandLine 'make', 'clean'
}

licenseFormatTest {
    outputs.upToDateWhen { false }
}

classes.dependsOn make
clean.dependsOn makeClean

xjc.dependsOn createDirs
compileJava.dependsOn xjc

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}


def gitCommitHash() {
    def env = System.getenv()
    def hash = env['GIT_COMMIT']
    def cmd = "git rev-parse --short HEAD"
    if (hash == null) {
        try {
            def proc = cmd.execute()
            hash = "git" + proc.text.trim()
        } catch (Exception e) {
            println("Could not execute git command: " + e.message)
            hash = null
        }
    } else {
        hash = hash[0..6]
    }
    return hash
}

def gitCommitDate() {
    def cmd = "git log -1 --date=short --pretty=format:%cd"
    def date = null
    try {
        def proc = cmd.execute()
        date = proc.text.trim().replaceAll(/-/, '')
    } catch (Exception e) {
        println("Could not execute git command: " + e.message)
        date = null
    }
    return date
}

processResources {
    filter(ReplaceTokens, tokens: [version: xroadVersion, buildType: xroadBuildType, gitCommitDate: gitCommitDate(), gitCommitHash: gitCommitHash()])
}


