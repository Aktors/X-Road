buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.moowork.gradle:gradle-node-plugin:1.1.0'
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

ext.excludeDevToolsSetting = project.hasProperty('activate-devtools-do-not-use-in-production') ? false : true

if (!excludeDevToolsSetting) {
    ant.input(message: 'Are you sure you want to activate devtools for jar packages?\n'
        + 'Devtools must not be used in non-development environments', validargs: 'y,n', addproperty: 'confirmation')

    if(ant.confirmation != 'y') {
        throw new GradleException('Stopped build since devtools should not be activated for non-development\n'
        + 'environments')
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.moowork.node"

bootRun {
    jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}

bootJar {
    excludeDevtools = excludeDevToolsSetting
    println 'excludeDevTools in bootJar=' + excludeDevToolsSetting
}

processResources {
    from ('frontend/dist/') {
        into 'public/'
    }
}

ext['hibernate.version'] = '4.3.11.Final'
ext['postgresql.version'] = '42.2.1'
ext['hikaricp.version'] = '2.3.3'
ext['quartz.version'] = '2.1.6'

node {
    download = false
    npmWorkDir = file("frontend")
    nodeModulesDir = file("frontend/node_modules")
}

task buildFront(type: NpmTask, dependsOn: 'npmInstall') {
    inputs.dir("frontend")
    outputs.dir("frontend/dist")
    args = ['run', 'build']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

processResources.dependsOn 'buildFront'

clean.delete << file('frontend/node_modules')
clean.delete << file('frontend/dist')

dependencies {
    implementation project(':serverconf')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.kohsuke:libpam4j:1.11')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    developmentOnly("org.springframework.boot:spring-boot-devtools")
}
