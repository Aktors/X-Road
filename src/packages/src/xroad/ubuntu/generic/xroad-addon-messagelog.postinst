#!/bin/bash
die() {
    echo >&2 "$@"
    exit 1
}

configure() {
  local db_name=messagelog
  local db_url=jdbc:postgresql://127.0.0.1:5432/${db_name}
  local db_user=messagelog
  local db_properties=/etc/xroad/db.properties
  local db_admin_properties=/etc/xroad/db-admin.properties
  local db_passwd
  db_passwd="$(head -c 24 /dev/urandom | base64 | tr "/+" "_-")"

  if  [[ -f ${db_properties}  && $(crudini --get ${db_properties} '' messagelog.hibernate.connection.url) != "" ]]
  then
    db_url=$(crudini --get ${db_properties} '' messagelog.hibernate.connection.url)
    db_user=$(crudini --get ${db_properties} '' messagelog.hibernate.connection.username)
    db_passwd=$(crudini --get ${db_properties} '' messagelog.hibernate.connection.password)
  else
    echo "no db settings detected, creating local db"

    if ! pg_isready -h localhost -p 5432
    then
      echo "Is postgres running on port 5432 ?"
      echo "Aborting installation! please fix issues and rerun with apt-get -f install"
      exit 100
    fi

    if ! su - postgres -c "psql --list -tAF ' '" | grep template1 | awk '{print $3}' | grep -q "UTF8"
    then
      echo "postgreSQL is not UTF8 compatible."
      echo "Aborting installation! please fix issues and rerun with apt-get -f install"
      exit 101
    fi

    if [[ $(su - postgres -c "psql postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='$db_user'\" ") == "1" ]]
    then
      echo  "$db_user exists, skipping schema creation"
      echo "ALTER ROLE ${db_user} WITH PASSWORD '${db_passwd}';" | su - postgres -c psql postgres
    else
      echo "CREATE ROLE $db_user LOGIN PASSWORD '$db_passwd';" | su - postgres -c psql postgres
    fi

    if [[ $(su - postgres -c "psql postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='$db_name'\"")  == "1" ]]
    then
      echo "database $db_name exists"
    else
      su - postgres -c "createdb $db_name -O $db_user -E UTF-8"
    fi

    touch ${db_properties}

    crudini --set ${db_properties} '' messagelog.hibernate.jdbc.use_streams_for_binary true
    crudini --set ${db_properties} '' messagelog.hibernate.dialect ee.ria.xroad.common.db.CustomPostgreSQLDialect
    crudini --set ${db_properties} '' messagelog.hibernate.connection.driver_class org.postgresql.Driver
    crudini --set ${db_properties} '' messagelog.hibernate.jdbc.batch_size 50
    crudini --set ${db_properties} '' messagelog.hibernate.connection.url "${db_url}"
    crudini --set ${db_properties} '' messagelog.hibernate.connection.username "${db_user}"
    crudini --set ${db_properties} '' messagelog.hibernate.connection.password "${db_passwd}"
  fi

  chown xroad:xroad ${db_properties}
  chmod 640 ${db_properties}

  cd /usr/share/xroad/db/ || die "Cannot run DB migrations"
  echo "running ${db_name} database migrations"

  if [[ -f "$db_admin_properties" ]]; then
    db_admin_user=$(crudini --get "$db_admin_properties" '' 'messagelog.admin.username' || echo "$db_user")
    db_admin_password=$(crudini --get "$db_admin_properties" '' 'messagelog.admin.password' || echo "$db_passwd")
  fi

  if [[ "$db_user" != "$db_admin_user" ]]; then
    context="--contexts=admin"
  fi

  JAVA_OPTS="-Ddb_user=$db_user" /usr/share/xroad/db/liquibase.sh \
    --classpath=/usr/share/xroad/jlib/proxy.jar \
    --url="${db_url}?dialect=ee.ria.xroad.common.db.CustomPostgreSQLDialect" \
    --changeLogFile=/usr/share/xroad/db/${db_name}-changelog.xml \
    --password="${db_admin_password}" \
    --username="${db_admin_user}" \
    $context \
    update \
    || die "Connection to database has failed, please check database availability and configuration in ${db_properties} file"

  service xroad-proxy restart || true
}

case "$1" in
  configure)
    configure
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" >&2
    exit 1
  ;;
esac

##DEBHELPER##
exit 0
